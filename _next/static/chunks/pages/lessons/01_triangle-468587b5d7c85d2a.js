(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[256],{1428:function(e,r,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/lessons/01_triangle",function(){return n(9876)}])},9876:function(e,r,n){"use strict";n.r(r);var t=n(5893),a=n(7294),o=n(5192),i=n(6671);let l=e=>{var r;e.tabWidth;let n=null!==(r=e.lang)&&void 0!==r?r:"javascript";return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(t.Fragment,{}),(0,t.jsx)("p",{style:{margin:0},children:"Title"}),(0,t.jsx)("div",{style:{marginTop:"16px",fontSize:"1rem",overflow:"hidden",borderRadius:"0.5rem"},children:(0,t.jsx)(o.Z,{language:n,style:i.Vg,customStyle:{margin:0},children:e.children})})]})},s=()=>{let e=(0,a.useRef)(null);return(0,a.useEffect)(()=>{let r=e.current;if(r){let n=function(e){console.log("Triangle"),e.width=e.clientWidth,e.height=e.clientHeight;let r=e.getContext("webgl");console.log(r),r.clearColor(1,0,0,1),r.clear(r.COLOR_BUFFER_BIT);let n=(()=>{let e=r.createShader(r.VERTEX_SHADER);r.shaderSource(e,"\n	attribute vec4 a_Position;\n	attribute vec4 a_Color;\n\n	varying vec4 fs_Color;\n\n	void main() {\n		gl_Position = a_Position;\n		fs_Color = a_Color;\n	}"),r.compileShader(e),r.getShaderParameter(e,r.COMPILE_STATUS)||console.error("Error compiling shader: ".concat(r.getShaderInfoLog(e)));let n=r.createShader(r.FRAGMENT_SHADER);r.shaderSource(n,"\n	precision mediump float;\n\n	varying vec4 fs_Color;\n	\n	void main() {\n		gl_FragColor = fs_Color;\n	}"),r.compileShader(n),r.getShaderParameter(n,r.COMPILE_STATUS)||console.error("Error compiling shader: ".concat(r.getShaderInfoLog(n)));let t=r.createProgram();return r.attachShader(t,e),r.attachShader(t,n),r.linkProgram(t),t})(),t=(()=>{let e=new Float32Array([[[-.5,-.5,0,1],[1,0,0,1]],[[.5,-.5,0,1],[0,1,0,1]],[[0,.5,0,1],[0,0,1,1]]].flat(3)),t=r.createBuffer();r.bindBuffer(r.ARRAY_BUFFER,t),r.bufferData(r.ARRAY_BUFFER,e,r.STATIC_DRAW);let a=r.getAttribLocation(n,"a_Position");r.vertexAttribPointer(a,4,r.FLOAT,!1,8*e.BYTES_PER_ELEMENT,0*e.BYTES_PER_ELEMENT),r.enableVertexAttribArray(a);let o=r.getAttribLocation(n,"a_Color");return r.vertexAttribPointer(o,4,r.FLOAT,!1,8*e.BYTES_PER_ELEMENT,4*e.BYTES_PER_ELEMENT),r.enableVertexAttribArray(o),t})(),a=()=>{e.width=e.clientWidth,e.height=e.clientHeight,r.viewport(0,0,e.width,e.height),console.log("Draw"),r.clearColor(0,0,0,.3),r.clearDepth(1),r.clear(r.COLOR_BUFFER_BIT),r.bindBuffer(r.ARRAY_BUFFER,t),r.useProgram(n),r.drawArrays(r.TRIANGLE_STRIP,0,3)};a();let o=setInterval(a,1e3);return console.log(o),o}(r);return console.log(n),()=>{console.log(n)}}},[]),(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("div",{style:{width:"70%",minHeight:"50vh",backgroundColor:"rgba(216, 216, 216, 1)",borderRadius:"1rem",margin:"20px auto 0 auto",padding:"0 2rem 0 2rem"},children:[(0,t.jsx)("h1",{style:{width:"100%",padding:"0.5rem 0 0 0",textAlign:"center"},children:"Lesson 1: Triangle"}),(0,t.jsx)("p",{children:"WebGL (Website Graphics Library) is a web based implemention of the OpenGL ES (Open Graphics Library for Embedded Systems) graphics API. It allows for the development of 2D and 3D graphics within the web browser, and facilitates a computer's built in graphics processing hardware to allow for high performance rendering."}),(0,t.jsx)("p",{children:"Hello WebGL is a series of interactive tutorials for learning WebGL, and is intended for new users who have little experience with computer graphics."}),(0,t.jsx)("p",{children:"This first lesson will take you through the basics of creating a WebGL context, and completing the necessary setup to render a triangle onto the screen"}),(0,t.jsx)(l,{lang:"html",children:'<html>\n  <body>\n    <canvas id="viewport" width="640" height="480"></canvas>\n  </body>\n</html>'}),(0,t.jsx)(l,{children:'const canvas = document.getElementById("viewport");\ncanvas.width = canvas.clientWidth;\ncanvas.height = canvas.clientHeight;\nconst gl = canvas.getContext("webgl");'}),(0,t.jsx)(l,{children:"gl.clearColor(0.0, 0.0, 0.0, 1.0);\ngl.clear(gl.COLOR_BUFFER_BIT);"}),(0,t.jsx)(l,{children:"const vs_source = `\nattribute vec4 a_Position;\nattribute vec4 a_Color;\n\nvarying vec4 fs_Color;\n\nvoid main() {\n	gl_Position = a_Position;\n	fs_Color = a_Color;\n}`;\nconst vs = gl.createShader(gl.VERTEX_SHADER);\ngl.shaderSource(vs, vs_source);\ngl.compileShader(vs);\nif(!gl.getShaderParameter(vs, gl.COMPILE_STATUS))\n	console.error(`Error compiling shader: ${gl.getShaderInfoLog(vs)}`);"}),(0,t.jsx)(l,{children:"const fs_source = `\nprecision mediump float;\n\nvarying vec4 fs_Color;\n\nvoid main() {\n	gl_FragColor = fs_Color;\n}`;\nconst fs = gl.createShader(gl.FRAGMENT_SHADER);\ngl.shaderSource(fs, fs_source);\ngl.compileShader(fs);\nif(!gl.getShaderParameter(fs, gl.COMPILE_STATUS))\n	console.error(`Error compiling shader: ${gl.getShaderInfoLog(fs)}`);"}),(0,t.jsx)(l,{children:"const shader = gl.createProgram();\ngl.attachShader(shader, vs);\ngl.attachShader(shader, fs);\ngl.linkProgram(shader);"}),(0,t.jsx)(l,{children:"const data = new Float32Array([\n	[[-0.5, -0.5, 0, 1], [1, 0, 0, 1]], \n	[[+0.5, -0.5, 0, 1], [0, 1, 0, 1]], \n	[[+0.0, +0.5, 0, 1], [0, 0, 1, 1]], \n].flat(3));\nconst buffer = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, buffer);\ngl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);"}),(0,t.jsx)("canvas",{ref:e,id:"viewport",style:{width:"100%",aspectRatio:"2 / 1"}}),(0,t.jsx)(t.Fragment,{})]})})};r.default=s}},function(e){e.O(0,[319,774,888,179],function(){return e(e.s=1428)}),_N_E=e.O()}]);